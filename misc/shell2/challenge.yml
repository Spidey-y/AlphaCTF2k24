name: shell2
author: j3x
author_link: https://github.com/amj3x

category: misc
difficulty: medium

description: |
  > Nevermind, I admit that was a noob mistake. I've learned from it and levelled up. Check this out, I've crafted an ultra-secure login mechanism in bash. I dare anyone to try and bypass it! 

  **Author** : j3x
flags:
  - AlphaCTF{N3v3r_f0rget_t0_qu0t3_ur_v4r1abl35}

type: dynamic
value: 500
extra:
    initial: 500
    decay: ${DECAY} # leave it like this
    minimum: 50
image: gcr.io/gdg-ctf-2022/{challenge_name}


connection_info: nc

topics:
  - bash

# Tags are used to provide additional public tagging to a challenge
# Can be removed if unused
# Accepts strings
# tags:
#   - sandbox
#   - js

# Files to be uploaded alongside the challenge in CTFd
# These paths are relative to the same directory where the challenge.yml file is.
files:
  - chall/script.sh

# DO NOT CHANGE

state: hidden

version: "0.1"

deployment:
  # Temporary auto IP ban when detecting abuse
  autoban: false
  # Allow/Deny egress (outcoming) traffic from pod
  # "allow" -> Allow outcoming traffic
  # "deny" -> Deny outcoming traffic
  egress: "allow"
  # This stores the challenge name but in an acceptable format for deployment
  # Regex for the name is [a-z0-9]+(-)*[a-z0-9]*
  name: shell2
  # The state of deployment of challenge (either false or true)
  deployed: false
  replicasNumber: 1
  # Type of the challenge either tcp or http 
  type: http 
  dockerRepository: gcr.io/gdg-ctf-2022
  dockerImage: challenge-name
  # If the challenge don't expose any port then leave it empty
  containerPort: 80
  limits:
    cpu: 200m
    memory: 500Mi 
  requests:
    cpu: 100m
    memory: 200Mi 
  healthCheck:
    initialDelaySeconds: 10
    periodSeconds: 30
  other: 
    # parameters of pod annotations 
    podAnnotations: {}

